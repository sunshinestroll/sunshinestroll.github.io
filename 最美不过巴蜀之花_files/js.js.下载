	
	var banner = 1;
	/*banner switch*/
	function switchBanner2(INDEX) {
		if ($('li.current').attr('id')!=INDEX) {
			$('li.current').removeClass('current');
			$('li[id="'+INDEX+'"]').addClass('current');
			$('div.banner-container:visible').fadeOut(1);
			$('div#banner-'+INDEX).fadeIn(1);
		}
	}
	function nextBanner(){
		banner = (banner==$("#bannerBanner .banner-container").length) ? 1 : (banner+1);
		switchBanner2(banner);
	}

	function preBanner(){
		banner = (banner==1) ? $("#bannerBanner .banner-container").length : (banner-1);
		switchBanner2(banner);
	}

	/*banner switch*/
	function switchBanner(INDEX) {
		if ($('li.current').attr('id')!=INDEX) {
			$('li.current').removeClass('current');
			$('li[id="'+INDEX+'"]').addClass('current');
			$('div.banner-container:visible').fadeOut(1000);
			$('div#banner-'+INDEX).fadeIn(1000);
		}
	}
	
	//var banner = 1;
	var bannerAuto;
	function setBanner() {
		bannerAuto = setInterval(function(){
			banner = (banner==$("#bannerBanner .banner-container").length) ? 1 : (banner+1);
			switchBanner(banner);
		}, 5000);
	}
	setBanner();
	

	
	$('.bannerNav li').click(function(){
		switchBanner($(this).attr('id'));
		banner = parseInt($(this).attr('id'));
		clearInterval(bannerAuto);
		//setTimeout(setbanner, 10000);
		setBanner();
	});
	
        
  function getbannerTop() {
		var bannerTop = $('.banner img').outerHeight() - 20;
		// $('.black').css('margin-top',bannerTop);
	}
	getbannerTop();
	
	function getimgTop() {
		var imgTop = $('.toutiao.big img').outerHeight() ;
		$('.toutiao.big').css('height',imgTop);
	}
	getimgTop();
	
	function getzhaiyaooneTop() {
          var imgH = $('.newindexchatu img').outerHeight()
          var p = $('p.zhaiyao.one').eq(0);
          while (p.outerHeight() > imgH) {
	        p.text(p.text().replace(/(\s)*([a-zA-Z0-9]+|\W)(\.\.\.)?$/, "..."));
	    };
		
	}
	getzhaiyaooneTop();
	
	function getzhaiyaotwoTop() {
          var imgH = $('.newindexchatu img').outerHeight()
          var p = $('p.zhaiyao.two').eq(0);
          while (p.outerHeight() > imgH) {
	        p.text(p.text().replace(/(\s)*([a-zA-Z0-9]+|\W)(\.\.\.)?$/, "..."));
	    };
		
	}
	getzhaiyaotwoTop();
	
	function getzhaiyaothreeTop() {
          var imgH = $('.newindexchatu img').outerHeight()
          var p = $('p.zhaiyao.three').eq(0);
          while (p.outerHeight() > imgH) {
	        p.text(p.text().replace(/(\s)*([a-zA-Z0-9]+|\W)(\.\.\.)?$/, "..."));
	    };
		
	}
	getzhaiyaothreeTop();
	
	function getzhaiyaofourTop() {
          var imgH = $('.newindexchatu img').outerHeight()
          var p = $('p.zhaiyao.four').eq(0);
          while (p.outerHeight() > imgH) {
	        p.text(p.text().replace(/(\s)*([a-zA-Z0-9]+|\W)(\.\.\.)?$/, "..."));
	    };
		
	}
	getzhaiyaofourTop();
	
	function getzhaiyaofiveTop() {
          var imgH = $('.newindexchatu img').outerHeight()
          var p = $('p.zhaiyao.five').eq(0);
          while (p.outerHeight() > imgH) {
	        p.text(p.text().replace(/(\s)*([a-zA-Z0-9]+|\W)(\.\.\.)?$/, "..."));
	    };
		
	}
	getzhaiyaofiveTop();
	
	function getzhaiyaosixTop() {
          var imgH = $('.newindexchatu img').outerHeight()
          var p = $('p.zhaiyao.six').eq(0);
          while (p.outerHeight() > imgH) {
	        p.text(p.text().replace(/(\s)*([a-zA-Z0-9]+|\W)(\.\.\.)?$/, "..."));
	    };
		
	}
	getzhaiyaosixTop();
	
	function getzhaiyaosevenTop() {
          var imgH = $('.newindexchatu img').outerHeight()
          var p = $('p.zhaiyao.seven').eq(0);
          while (p.outerHeight() > imgH) {
	        p.text(p.text().replace(/(\s)*([a-zA-Z0-9]+|\W)(\.\.\.)?$/, "..."));
	    };
		
	}
	getzhaiyaosevenTop();
        
        //function getIMGTops() {
         //       var IMGTOPs = $('.toutiao.small img').outerHeight() ;
         //       $('.toutiao.small').css('height',IMGTops * 2);
	//}
	//getIMGTops();

        //floatdiv
	$("span.closediv").click(function(){
		$(".floatdiv").hide();
	});
	
  $(".pop-box .tit1 .t").click(function(){
		$(".pop-box").removeClass("showd");
	});
	
	
	
        //second nav
	
		var bigW = $(window).width();
		var line_W = bigW - 894 ;
		var asdf = line_W/2;
		$(".navmenu.second ul.nav.big li:first").css("margin-left",asdf);
		
		//var b1 = $(".navmenu.second ul.nav.intro li:eq(0)").outerWidth();
		//var b2 = $(".navmenu.second ul.nav.intro li:eq(1)").width();
		//var b3 = $(".navmenu.second ul.nav.intro li:eq(2)").width();
		//var b4 = $(".navmenu.second ul.nav.intro li:eq(3)").width();
		//var b5 = $(".navmenu.second ul.nav.intro li:eq(4)").width();
		//var b6 = $(".navmenu.second ul.nav.intro li:eq(5)").width();
		//var b7 = $(".navmenu.second ul.nav.intro li:eq(6)").width();
		//var b8 = $(".navmenu.second ul.nav.intro li:eq(7)").width();
		//var b9 = $(".navmenu.second ul.nav.intro li:eq(8)").width();
		//var s_W = b1+b2+b3+b4+b5+b6+b7+b8+b9;
		var lines_W = bigW - 564;
		var asdfg = lines_W/2;
		$(".navmenu.second ul.nav.intro li:first").css("margin-left",asdfg);
		
	$("button.btn.btn-navbar.second").click(function(){
		
	//	var b1 = $(".navmenu.second ul li:eq(0)").outerWidth();
	//	var b2 = $(".navmenu.second ul li:eq(1)").width();
	//	var b3 = $(".navmenu.second ul li:eq(2)").width();
	//	var b4 = $(".navmenu.second ul li:eq(3)").width();
	//	var b5 = $(".navmenu.second ul li:eq(4)").width();
	//	var b6 = $(".navmenu.second ul li:eq(5)").width();
	//	var b7 = $(".navmenu.second ul li:eq(6)").width();
		//var b8 = $(".navmenu.second ul li:eq(7)").width();
		//var b9 = $(".navmenu.second ul li:eq(8)").width();
		//var small_w = b1 + b2 + b3 + b4 + b5 + b6 +b7 + b8 + b9 ;
		$(".navmenu.second").toggle(300);
	});        
	
        $("a.search_btn").click(function(){
		$("input.span2.navsearchinput").fadeIn(300);
	});    
        
	
	
  $(window).load(function () {
    var mk = $(".navbar").siblings('.zwch').height();
    var mh = $(window).height();
    var mkh = mh-$('.navbar').outerHeight(true) -60;
    // if (mk<mkh) {
      //$(".navbar").siblings('.zwch').css({"min-height":mh - $('.navbar').outerHeight(true) - $('.footer').outerHeight(true)});
      //code
    // }
  })
	var h = $(window).width();
	if (h>980) {
		var bigW = $(window).width();
		var line_W = bigW - 964 ;
		var asdf = line_W/2;
		$(".navmenu ul.navs li:first").css("margin-left",asdf);//code
	};
	
	
	if (h<980) {
		
		$("li.dropdowns").click(function(){
			$("li.open").removeClass("open");
			$(this).toggleClass("open");
		});
		
};
if ($(window).width() < 768) {
  $("ul.nav.nav-tabs.sch_tab").each(function(){
    var that = $(this);
    $(this).find("li").on('click',function(){
      var tidx = $(this).index(),
        tw = $(this).outerWidth(true);
      that.scrollLeft(tidx * tw)
    })
  })
}
$.utils = {
	temp: {},
	
	// 是否为 null
	is_null: function(a) {
	  return (a === null);
	},
	// 是否为 undefined
	is_undefined: function(a) {
	  return typeof a == 'undefined';
	},
	// 是否为空
	is_none: function(a) {
	  return (this.is_null(a) || this.is_undefined(a) || a === '' || a === 'undefined');
	},
	// 是否为 true
	is_true: function(a) {
	  return (a === true || a === 'true');
	},
	// 是否为 false
	is_false: function(a) {
	  return (a === false || a === 'false');
	},
	// 是否为数组
	is_array: function(a) {
	  return (a instanceof Array);
	},
	// 是否为数字
	is_number: function(a) {
	  return ((a instanceof Number || typeof a == 'number') && !isNaN(a));
	},
	// 是否为百分数
	is_percentage: function(a) {
	  return (this.is_string(a) && a.slice(-1) == '%');
	},
	// 是否为字符串
	is_string: function(a) {
	  return ((a instanceof String || typeof a == 'string') && !this.is_none(a) && !this.is_true(a) && !this.is_false(a));
	},
	// 是否为函数
	is_function: function(a) {
	  return (a instanceof Function || typeof a == 'function');
	},
	// 是否为布尔
	is_boolean: function(a) {
	  return (a instanceof Boolean || typeof a == 'boolean' || this.is_true(a) || this.is_false(a));
	},
	// 是否为jq对象
	is_jquery: function(a) {
	  return (a instanceof jQuery);
	},
	// 是否为对象
	is_object: function(a) {
	  return ((a instanceof Object || typeof a == 'object') && !this.is_null(a) && !this.is_jquery(a) && !this.is_array(a) && !this.is_function(a));
	},
	// 是否为 dom 元素
	is_dom: function(a) {
	  return (this.is_object(a) && a instanceof HTMLElement);
	},
	init: function (options) {
	  var _this = this;
	  
	  $(function () {
		_this.placeholder();
  
		_this.objectFitPolyfill();
  
		if (_this.is_true(options.htmlSize) || _this.is_number(options.htmlSize)) {
		  _this.htmlSize(_this.is_true(options.htmlSize) ? 750 : options.htmlSize, 320);       
		}
  
		// _this.screenScrollbar();
  
		_this.contHeight();
  
		_this.horizontalNav();
  
		_this.getFullScreen();
  
		_this.backTop(options.backTop);
  
		_this.scrollFade(options.scrollFade);
	  });
	},
	initTracker:function(){
		$('.tracker-mod').each(function () {
			var $this = $(this),
			  $box = $this.find('.tracker-box'),
			  $track = $this.find('.tracker-track'),
			  $item = $this.find('.tracker-item'),
			  $prev = $this.find('.tracker-prev'),
			  $next = $this.find('.tracker-next'),
			  idx = $item.filter('.cur').length > 0 ? $item.filter('.cur').index() : 0,
			  isPage = !$.utils.is_undefined($this.attr('page')),
			  isRound = !$.utils.is_undefined($this.attr('round')),
			  drager = null, dir = null,
			  $in = null, $out = null, $over = null;
		
			init();
		
			$(window).on('resize', $.debounce(300, init));
		
			$item.on('click.tracker', function () {
			  clickItem($(this));
			});
		
		
		
			$this.on('refresh', function (e, i) {
			  e.stopPropagation();
			  if($.utils.is_undefined(i)){
				i = 0;
			  }
			  
			  idx = i;
			  init();
			});
		
			function init() {
			  if ($track.outerWidth() > $box.width()) {
				dir = 'x';
			  }else if ($track.outerHeight() > $box.height()) {
				dir = 'y';
			  } else {
				dir = null;
			  }
		
			  if (drager && drager.length > 0 && drager[0].vars.type != dir) {
				drager[0].kill();
				drager = null;
				gsap.set($track, {x: 0, y: 0});
			  }
		
			  if (!drager) {
				$item.removeClass('in out over');
			  }
			  
			  if ($.utils.is_string(dir)) {
				if (!drager) {
				  drager = Draggable.create($track, {
					type: dir,
					bounds: $box,
					inertia: true,
					lockAxis: true,
					zIndexBoost: false,
					dragResistance: 0.3,
					edgeResistance: 0.9,
					dragClickables: true,
					allowContextMenu: true,
					onClick: function (self) {
					  gsap.killTweensOf('.tracker-track');
					},
					onDragEnd: function () {
					  viewItems();
					},
					onThrowComplete: function () {
					  if (isPage && !isRound) {
						if (dir == 'x') {
						  if (this.x == 0) {
							$prev.addClass('disable');
							$next.removeClass('disable');
						  } else if (this.x == this.minX) {
							$next.addClass('disable');
							$prev.removeClass('disable');
						  } else {
							$prev.removeClass('disable');
							$next.removeClass('disable');
						  }
						} else if (dir == 'y') {
						  if (this.y == 0) {
							$prev.addClass('disable');
							$next.removeClass('disable');                    
						  } else if (this.y == this.minY) {
							$next.addClass('disable');
							$prev.removeClass('disable');
						  } else {
							$prev.removeClass('disable');
							$next.removeClass('disable');
						  }
						}
					  }
					}
				  });
				} else {
				  drager[0].update(true);
				}
		
				$prev.removeClass('disdrag');
				$next.removeClass('disdrag');
			  } else {
				$prev.addClass('disdrag');
				$next.addClass('disdrag');
			  }
			  
			  clickItem($item.eq(idx), true);
			}
		
			function viewItems() {
			  $in = null, $out = null, $over = null;
		
			  $item.removeClass('in out over');
		
			  $in = $item.filter(function () {
				if (dir == 'x') {
				  return $(this).offset().left >= $box.offset().left && $(this).offset().left + $(this).outerWidth() <= $box.offset().left + $box.width();
				} else if (dir == 'y') {
				  return $(this).offset().top >= $box.offset().top && $(this).offset().top + $(this).outerHeight() <= $box.offset().top + $box.height();
				}
			  }).addClass('in');
		
			  $out = $item.not($in).addClass('out');
		
			  $over = $out.filter(function () {
				if (dir == 'x') {
				  return ($(this).offset().left < $box.offset().left && $(this).offset().left + $(this).outerWidth() > $box.offset().left) || ($(this).offset().left < $box.offset().left + $box.width() && $(this).offset().left + $(this).outerWidth() > $box.offset().left + $box.width());
				} else if (dir == 'y') {
				  return ($(this).offset().top < $box.offset().top && $(this).offset().top + $(this).outerHeight() > $box.offset().top) || ($(this).offset().top < $box.offset().top + $box.height() && $(this).offset().top + $(this).outerHeight() > $box.offset().top + $box.height());
				}
			  }).addClass('over');
			}
		
			function clickItem(item, dur) {
			  if (item.length == 0 || (!dur && item.index() == idx)) {
				return;
			  }
			  
			  idx = item.index();
			  
			  if (!isRound && !isPage) {
				if (idx == 0) {
				  $prev.addClass('disable');
				} else {
				  $prev.removeClass('disable');
				}
		
				if (idx == $item.length - 1) {
				  $next.addClass('disable');
				} else {
				  $next.removeClass('disable');
				}
			  }
		
			  if (!item.hasClass('cur')) {
				item.addClass('cur').siblings().removeClass('cur');
			  }
			  
			  if (!drager) {
				return;
			  }
		
			  var npos, bpos, ipos, dmin, tween1, tween2, tween3, gs,
				duration = dur ? 0 : 0.5;
			  
			  if (dir == 'x') {
				npos = gsap.getProperty($track[0], 'x');
				bpos = $box.offset().left + $box.width() / 2;
				ipos = item.offset().left + item.outerWidth() / 2;
				dmin = drager[0].minX;
				tween1 = { duration: duration, x: dmin };
				tween2 = { duration: duration, x: drager[0].maxX };
				tween3 = { duration: duration, x: '+=' + (bpos - ipos) };
			  } else if(dir == 'y'){
				npos = gsap.getProperty($track[0], 'y');
				bpos = $box.offset().top + $box.height() / 2;
				ipos = item.offset().top + item.outerHeight() / 2;
				dmin = drager[0].minY;
				tween1 = { duration: duration, y: dmin };
				tween2 = { duration: duration, y: drager[0].maxY };
				tween3 = { duration: duration, y: '+=' + (bpos - ipos) };
			  }      
			  
			  // drager[0].update(true);
		
			  if (ipos > bpos) {
				if (dmin - npos + ipos - bpos > 0) {
				  gs = gsap.to($track, tween1);
				} else {
				  gs = gsap.to($track, tween3);
				}
			  } else {
				if (npos + bpos - ipos > 0) {
				  gs = gsap.to($track, tween2);
				} else {
				  gs = gsap.to($track, tween3);
				}
			  }
		
			  if (duration > 0) {
				gs.eventCallback('onComplete', viewItems);        
			  } else {
				viewItems();
			  }
			}    
		});
	}
  };

$('.tracker-mod').each(function () {
	var $this = $(this),
	  $box = $this.find('.tracker-box'),
	  $track = $this.find('.tracker-track'),
	  $item = $this.find('.tracker-item'),
	  $prev = $this.find('.tracker-prev'),
	  $next = $this.find('.tracker-next'),
	  idx = $item.filter('.cur').length > 0 ? $item.filter('.cur').index() : 0,
	  isPage = !$.utils.is_undefined($this.attr('page')),
	  isRound = !$.utils.is_undefined($this.attr('round')),
	  drager = null, dir = null,
	  $in = null, $out = null, $over = null;

	init();

	$(window).on('resize', $.debounce(300, init));

	$item.on('click.tracker', function () {
	  clickItem($(this));
	});

	$prev.on('click.tracker', function () {
	  var dis = 0,
		page = $this.attr('page'),
		$turn = $item.eq(idx).prevAll(':visible').first();

	  if (isPage) {
		if (!drager) {
		  return;
		}

		$turn = $in.length > 0 ? $in.first().prevAll(':visible') : $over.first().prevAll(':visible');
		$turn = $turn.filter(function (i) {
		  if (page > 0) {
			return i < page;
		  } else {
			return i == 0;
		  }
		});

		if ($turn.length == 0) {
		  if (drager && isRound) {
			if (dir == 'x') { 
			  gsap.to($track, { duration: 0.5, x: drager[0].minX, onComplete: viewItems });
			} else if (dir == 'y'){
			  gsap.to($track, { duration: 0.5, y: drager[0].minY, onComplete: viewItems });              
			}
		  }
		  return;
		}

		if (!isRound) {
		  $next.removeClass('disable');
		  
		  if (drager && $in.first().prevAll(':visible').length == 1) {
			$prev.addClass('disable');
		  }
		}


		if (dir == 'x') {
		  dis = page > 0 ? gsap.getProperty($track[0], 'x') + ($box.offset().left - $turn.offset().left) : gsap.getProperty($track[0], 'x') + (($box.offset().left + $box.width()) - ($turn.offset().left + $turn.outerWidth()));

		  if (dis >= 0) {
			dis = 0;
  
			if (!isRound) {
			  $prev.addClass('disable');
			}    
		  }
		  gsap.to($track, { duration: 0.5, x: dis, onComplete: viewItems });
		} else if (dir == 'y') {
		  dis = page > 0 ? gsap.getProperty($track[0], 'y') + ($box.offset().top - $turn.offset().top) : gsap.getProperty($track[0], 'y') + (($box.offset().top + $box.height()) - ($turn.offset().top + $turn.outerHeight()));

		  if (dis >= 0) {
			dis = 0;
  
			if (!isRound) {
			  $prev.addClass('disable');
			}    
		  }
		  gsap.to($track, {duration: 0.5, y: dis, onComplete: viewItems});
		}
	  } else {
		if ($turn.length == 0) {
		  if (isRound) {
			$item.last().triggerHandler('click');
		  }
		} else {
		  $turn.triggerHandler('click');
		}
	  }
	});

	$next.on('click.tracker', function () {
	  var dis = 0,
		page = $this.attr('page'),
		$turn = $item.eq(idx).nextAll(':visible').first();

	  if (isPage) {
		if (!drager) {
		  return;
		}

		$turn = $in.length > 0 ? $in.last().nextAll(':visible') : $over.last().nextAll(':visible');
		$turn = $turn.filter(function (i) {
		  if (page > 0) {
			return i < page;
		  } else {
			return i == 0;
		  }
		});

		if ($turn.length == 0) {
		  if (drager && isRound) {
			if (dir == 'x') { 
			  gsap.to($track, { duration: 0.5, x: 0, onComplete: viewItems });
			} else if (dir == 'y'){
			  gsap.to($track, { duration: 0.5, y: 0, onComplete: viewItems });              
			}
		  }
		  return;
		}

		if (!isRound) {
		  $prev.removeClass('disable');
		  
		  if (drager && $in.last().nextAll(':visible').length == 1) {
			$next.addClass('disable');
		  }
		}

		if (dir == 'x') {
		  dis = page > 0 ? gsap.getProperty($track[0], 'x') - (($turn.offset().left + $turn.outerWidth()) - ($box.offset().left + $box.width())) : gsap.getProperty($track[0], 'x') - ($turn.offset().left - $box.offset().left);
		  
		  if (dis - drager[0].minX <= 0) {
			dis = drager[0].minX;
			if (!isRound) {
			  $next.addClass('disable');
			}    
		  }

		  gsap.to($track, {duration: 0.5, x: dis, onComplete: viewItems});
		} else if (dir == 'y') {
		  dis = page > 0 ? gsap.getProperty($track[0], 'y') - (($turn.offset().top + $turn.outerHeight()) - ($box.offset().top + $box.height())) : gsap.getProperty($track[0], 'y') - ($turn.offset().top - $box.offset().top);
		  
		  if (dis - drager[0].minY <= 0) {
			dis = drager[0].minY;
			if (!isRound) {
			  $next.addClass('disable');
			}    
		  }

		  gsap.to($track, {duration: 0.5, y: dis, onComplete: viewItems});
		}
	  } else {
		if ($turn.length == 0) {
		  if (isRound) {
			$item.first().triggerHandler('click');
		  }
		} else {
		  $turn.triggerHandler('click');
		}
	  }
	});

	$this.on('refresh', function (e, i) {
	  e.stopPropagation();
	  if($.utils.is_undefined(i)){
		i = 0;
	  }
	  
	  idx = i;
	  init();
	});

	function init() {
	  if ($track.outerWidth() > $box.width()) {
		dir = 'x';
	  }else if ($track.outerHeight() > $box.height()) {
		dir = 'y';
	  } else {
		dir = null;
	  }

	  if (drager && drager.length > 0 && drager[0].vars.type != dir) {
		drager[0].kill();
		drager = null;
		gsap.set($track, {x: 0, y: 0});
	  }

	  if (!drager) {
		$item.removeClass('in out over');
	  }
	  
	  if ($.utils.is_string(dir)) {
		if (!drager) {
		  drager = Draggable.create($track, {
			type: dir,
			bounds: $box,
			inertia: true,
			lockAxis: true,
			zIndexBoost: false,
			dragResistance: 0.3,
			edgeResistance: 0.9,
			dragClickables: true,
			allowContextMenu: true,
			onClick: function (self) {
			  gsap.killTweensOf('.tracker-track');
			},
			onDragEnd: function () {
			  viewItems();
			},
			onThrowComplete: function () {
			  if (isPage && !isRound) {
				if (dir == 'x') {
				  if (this.x == 0) {
					$prev.addClass('disable');
					$next.removeClass('disable');
				  } else if (this.x == this.minX) {
					$next.addClass('disable');
					$prev.removeClass('disable');
				  } else {
					$prev.removeClass('disable');
					$next.removeClass('disable');
				  }
				} else if (dir == 'y') {
				  if (this.y == 0) {
					$prev.addClass('disable');
					$next.removeClass('disable');                    
				  } else if (this.y == this.minY) {
					$next.addClass('disable');
					$prev.removeClass('disable');
				  } else {
					$prev.removeClass('disable');
					$next.removeClass('disable');
				  }
				}
			  }
			}
		  });
		} else {
		  drager[0].update(true);
		}

		$prev.removeClass('disdrag');
		$next.removeClass('disdrag');
	  } else {
		$prev.addClass('disdrag');
		$next.addClass('disdrag');
	  }
	  
	  clickItem($item.eq(idx), true);
	}

	function viewItems() {
	  $in = null, $out = null, $over = null;

	  $item.removeClass('in out over');

	  $in = $item.filter(function () {
		if (dir == 'x') {
		  return $(this).offset().left >= $box.offset().left && $(this).offset().left + $(this).outerWidth() <= $box.offset().left + $box.width();
		} else if (dir == 'y') {
		  return $(this).offset().top >= $box.offset().top && $(this).offset().top + $(this).outerHeight() <= $box.offset().top + $box.height();
		}
	  }).addClass('in');

	  $out = $item.not($in).addClass('out');

	  $over = $out.filter(function () {
		if (dir == 'x') {
		  return ($(this).offset().left < $box.offset().left && $(this).offset().left + $(this).outerWidth() > $box.offset().left) || ($(this).offset().left < $box.offset().left + $box.width() && $(this).offset().left + $(this).outerWidth() > $box.offset().left + $box.width());
		} else if (dir == 'y') {
		  return ($(this).offset().top < $box.offset().top && $(this).offset().top + $(this).outerHeight() > $box.offset().top) || ($(this).offset().top < $box.offset().top + $box.height() && $(this).offset().top + $(this).outerHeight() > $box.offset().top + $box.height());
		}
	  }).addClass('over');
	}

	function clickItem(item, dur) {
	  if (item.length == 0 || (!dur && item.index() == idx)) {
		return;
	  }
	  
	  idx = item.index();
	  
	  if (!isRound && !isPage) {
		if (idx == 0) {
		  $prev.addClass('disable');
		} else {
		  $prev.removeClass('disable');
		}

		if (idx == $item.length - 1) {
		  $next.addClass('disable');
		} else {
		  $next.removeClass('disable');
		}
	  }

	  if (!item.hasClass('cur')) {
		item.addClass('cur').siblings().removeClass('cur');
	  }
	  
	  if (!drager) {
		return;
	  }

	  var npos, bpos, ipos, dmin, tween1, tween2, tween3, gs,
		duration = dur ? 0 : 0.5;
	  
	  if (dir == 'x') {
		npos = gsap.getProperty($track[0], 'x');
		bpos = $box.offset().left + $box.width() / 2;
		ipos = item.offset().left + item.outerWidth() / 2;
		dmin = drager[0].minX;
		tween1 = { duration: duration, x: dmin };
		tween2 = { duration: duration, x: drager[0].maxX };
		tween3 = { duration: duration, x: '+=' + (bpos - ipos) };
	  } else if(dir == 'y'){
		npos = gsap.getProperty($track[0], 'y');
		bpos = $box.offset().top + $box.height() / 2;
		ipos = item.offset().top + item.outerHeight() / 2;
		dmin = drager[0].minY;
		tween1 = { duration: duration, y: dmin };
		tween2 = { duration: duration, y: drager[0].maxY };
		tween3 = { duration: duration, y: '+=' + (bpos - ipos) };
	  }      
	  
	  // drager[0].update(true);

	  if (ipos > bpos) {
		if (dmin - npos + ipos - bpos > 0) {
		  gs = gsap.to($track, tween1);
		} else {
		  gs = gsap.to($track, tween3);
		}
	  } else {
		if (npos + bpos - ipos > 0) {
		  gs = gsap.to($track, tween2);
		} else {
		  gs = gsap.to($track, tween3);
		}
	  }

	  if (duration > 0) {
		gs.eventCallback('onComplete', viewItems);        
	  } else {
		viewItems();
	  }
	}    
});

;(function(window, document, $, undefined) {

	
  /*	百度地图	*/
    $.fn.xMap = function(options){
      
      if(this.length == 0){
        console.log('xMap - 未找到元素[' + this.selector + ']');
        return this;
      }
      
      if(!window.BMap){
        getScript();
      }else{
        console.log('xMap - 插件采用异步加载，不支持同一页面加载多个地图');
        return this;
      }
      
      var $map = this;
  
      var def = {
        map: {
          style: '',													//	地图风格 normal、dark、midnight、grayscale、hardedge
          zoom: 18,														//	地图缩放级别
          mclick: false												//	地图背景是否可点击
        },
        maker: {
          src: '',														//	自定义图标地址
          size: [100, 100],										//	图标尺寸
          offset: [0, 0],											//	图标偏移
          anim: false													//	图标弹跳动画
        },
        info: {
          auto: true,													//	是否自动弹出信息框
          able: true,													//	是否禁用信息框
          swin: false													//	是否调用查询信息框
        },
        cenOffset: {													//	中心点偏移
          x: 0,
          y: 0
        },
        control: {
          zoomBar: true,    									//	平移缩放控件
          miniMap: false    									//	缩略图控件
        },
        event: {
          drag: true,													//	拖拽
          wheelZoom: false										//	滚动缩放
        },
        data: {
          data_list: '.bdmap-list-item',			//	查询列表项类名
          data_info: '.bdmap-info-item',			//	信息框项类名
          data_sync: '.bdmap-sync-item',			//	关联列表项类名
          data_search: null										//	查询关键字或坐标
        },
        temp: {																//	临时数据
          cur: 0
        }
      };
      
      var opts = checkDate();
      
      function getScript(){
        window.BMap = window.BMap || {};
        window.BMap.apiLoad = function (){
          delete window.BMap.apiLoad;
          createMap();
        };
  
        var s = document.createElement('script');
        s.src = 'http://api.map.baidu.com/getscript?v=3.0&ak=3c3f2a3587ab7a1d7ac9f2b326d66ec8&services=&t=' + new Date().getTime();
        document.body.appendChild(s);
      }
  
      function getData(){
        var data = {};
        
        for(var k in $map.data()){
          if(is_exist($map.data(k))){
            data['data_' + k] = $map.data(k);
          }
        }
        
        if(!is_undefined(data.data_search)){
          def.temp.cur = -1;
        }
        
        return data;
      }
      
      function getOpts(){
        var obj = $.extend(true, {}, options);
      
        if(is_number(obj.map)){
          obj.map = {zoom: obj.map};
        }else if(is_string(obj.map)){
          obj.map = {style: obj.map};
        }else if(is_boolean(obj.map)){
          obj.map = {mclick: obj.map};
        }
        
        if(is_boolean(obj.maker)){
          obj.maker = {anim: obj.maker};
        }else if(is_string(obj.maker)){
          obj.maker = {src: obj.maker};
        }
  
        if(is_boolean(obj.info)){
          obj.info = {auto: obj.info};
        }
  
        if(is_number(obj.cenOffset)){
          obj.cenOffset = {x: obj.cenOffset};
        }
  
        if(is_boolean(obj.control)){
          obj.control = {zoomBar: obj.control, miniMap: obj.control};
        }
        
        if(is_boolean(obj.event)){
          obj.event = {drag: obj.event, wheelZoom: obj.event};
        }
  
        return obj;
      }
        
      function checkDate(){
        var obj = $.extend(true, {}, def, getOpts(), {data: getData()});
        
        if(!$(obj.data.data_list).length){
          obj.data.data_list = null;
        }
        
        if(!$(obj.data.data_info).length){
          obj.data.data_info = null;
        }
        
        if(!$(obj.data.data_sync).length){
          obj.data.data_sync = null;
        }
        
        return obj;
      }
      
      function createMap(){
        
        var map = new BMap.Map($map[0], {enableMapClick: opts.map.mclick});
  
        map.centerAndZoom(new BMap.Point(0, 0), opts.map.zoom);
  
        setMapControl();			//	向地图添加控件
        setMapEvent();				//	设置地图事件
        setMapStyle();		  	//	设置地图风格	http://lbsyun.baidu.com/custom/list.htm
        
        formatInfo();
        setFirst();
        
        if(!is_null(opts.data.data_list)){
          $(document).on('click.xmap', opts.data.data_list, function(){
            var $this = $(this);
  
            if(!$this.hasClass('cur')){
              $(opts.data.data_list).removeClass('cur');
              $this.addClass('cur');
              
              search($this.data('search'), $this.index(opts.data.data_list));
            }
          });
        }
  
        function cenOffset(){
          if(!device().isMobile){
            map.panBy(opts.cenOffset.x, opts.cenOffset.y, {noAnimation: true});
          }
        }
  
        function setMapControl(){
          if(is_true(opts.control.zoomBar)){
            map.addControl(new BMap.NavigationControl());
          }
  
          if(is_true(opts.control.miniMap)){
            map.addControl(new BMap.OverviewMapControl({isOpen:true, anchor: BMAP_ANCHOR_BOTTOM_RIGHT}));
          }
        }
  
        function setMapEvent(){
          if(is_true(def.event.drag)){
            map.enableDragging();
          }else if(is_false(def.event.drag)){
            map.disableDragging();
          }
  
          if(is_true(def.event.wheelZoom)){
            map.enableScrollWheelZoom();
          }else if(is_false(def.event.wheelZoom)){
            map.disableScrollWheelZoom();
          }
        }
  
        function setMapStyle(){
          if(!is_undefined(opts.map.style)){
            map.setMapStyle({style: opts.map.style});
          }
        }
        
        function search(key, idx){
          
          map.clearOverlays();
  
          opts.temp.results = false;
          opts.temp.info = null;
          opts.temp.point = null;
          opts.temp.marker = null;
          opts.temp.title = '';
          opts.temp.address = '';
          opts.temp.phoneNumber = '';
          opts.temp.postcode = '';
          opts.temp.detailUrl = '';
  
          if(!is_undefined(key)){
            if(is_string(key)){
              if(key.indexOf(',') > 0){
                lp();
              }else{
                ls();
              }
            }else if(is_array(key)){
              lp();
            }else{
              console.log('xMap - 指定的查询参数数据类型不正确');
              return;
            }
          }else{
            console.log('xMap - 未指定任何查询参数');
            return;
          }
          
          if(idx >= 0 && !is_null(opts.data.data_sync)){
            $(opts.data.data_sync).eq(idx).addClass('act').siblings().removeClass('act');
          }
                  
          function ls(){
            var local = new BMap.LocalSearch(map);
  
            local.search(key, {forceLocal: false});
  
            local.setSearchCompleteCallback(function(results){
              if(local.getStatus() > 0){
                console.log('查询失败 - 无法定位到[' + key +']所在位置，尝试更换查询字符串或指定坐标');
                return;
              }else{
                opts.temp.results = true;
                opts.temp.point = results.getPoi(0).point;
                opts.temp.title = results.getPoi(0).title;
                opts.temp.address = results.getPoi(0).address;
                opts.temp.phoneNumber = results.getPoi(0).phoneNumber;
                opts.temp.postcode = results.getPoi(0).postcode;
                opts.temp.detailUrl = results.getPoi(0).detailUrl;
                
                addMapOverlay();
              }
            });
          }
          
          function lp(){
            if(is_string(key)){
              key = key.split(',');
            }
            
            if(is_array(key)){
              opts.temp.point = new BMap.Point(key[0], key[1]);
              
              addMapOverlay();
            }
          }
          
          function addMapOverlay(){
            setInfoWindow();
  
            opts.temp.marker = new BMap.Marker(opts.temp.point);
  
            if(!is_undefined(opts.maker.src)){
              var icon = new BMap.Icon(opts.maker.src, new BMap.Size(opts.maker.size[0], opts.maker.size[1]), {anchor: new BMap.Size(opts.maker.offset[0], opts.maker.offset[1])});
              opts.temp.marker.setIcon(icon);
            }
  
            map.addOverlay(opts.temp.marker);
  
            if(is_true(opts.maker.anim)){
              opts.temp.marker.setAnimation(BMAP_ANIMATION_BOUNCE);
            }
  
            opts.temp.marker.addEventListener('click', function(){
              if(is_true(opts.info.able) && !is_undefined(opts.temp.info)){
                this.openInfoWindow(opts.temp.info);
              }
            });
  
            map.centerAndZoom(opts.temp.point, opts.map.zoom);
            cenOffset();
            
            if(is_true(opts.info.able) && is_true(opts.info.auto) && !is_undefined(opts.temp.info)){
              opts.temp.marker.openInfoWindow(opts.temp.info);
            }
  
          }
          
          function setInfoWindow(){
            var title = '', address = '', phoneNumber = '', postcode = '';
            
            if(is_null(opts.data.data_info)){
              if(opts.temp.results){
                title = !is_undefined(opts.temp.title) ? '<div class="h18">'+ opts.temp.title +'</div>' : '';
                address = !is_undefined(opts.temp.address) ? '地址：'+ opts.temp.address : '';
                phoneNumber = !is_undefined(opts.temp.phoneNumber) ? '<br>电话：'+ opts.temp.phoneNumber : '';
                postcode = !is_undefined(opts.temp.postcode) ? '<br>邮编：'+ opts.temp.postcode : '';
                opts.temp.info = new BMap.InfoWindow(title +'<p>'+ address + phoneNumber + postcode + '</p>', {width : 300});
              }else{
                console.log('xMap - 查询 坐标[' + key + ']: 无法自动获取坐标信息，需自定义信息框数据');
              }
            }else{
              if($(opts.data.data_info).eq(idx).length > 0){
                if(is_undefined($(opts.data.data_info).eq(idx).html())){
                  title = !is_undefined(opts.temp.title) ? '<div class="h18">'+ opts.temp.title +'</div>' : '';
                  address = !is_undefined(opts.temp.address) ? '地址：'+ opts.temp.address : '';
                  phoneNumber = !is_undefined(opts.temp.phoneNumber) ? '<br>电话：'+ opts.temp.phoneNumber : '';
                  postcode = !is_undefined(opts.temp.postcode) ? '<br>邮编：'+ opts.temp.postcode : '';
                  opts.temp.info = new BMap.InfoWindow(title +'<p>'+ address + phoneNumber + postcode + '</p>', {width : 300});
                }else{
                  opts.temp.info = new BMap.InfoWindow($(opts.data.data_info).eq(idx).html(), {width : $(opts.data.data_info).eq(idx).width()});
                }
              }else{
                console.log('xMap - 未找到关键词[' + key + ']: 所对应的自定义信息框项');
              }
            }
          }
          
        }
        
        function setFirst(){
          if(opts.temp.cur < 0){
            search(opts.data.data_search, opts.temp.cur);
          }else{
            if(!is_null(opts.data.data_list)){
              if($(opts.data.data_list + '.cur').length < 1){
                $(opts.data.data_list).eq(0).addClass('cur');
              }
              
              search($(opts.data.data_list + '.cur').data('search'), $(opts.data.data_list + '.cur').index());
            }else{
              console.log('xMap - 未指定任何查询参数');
            }
          }
        }
        
        function formatInfo(){
          if(opts.temp.cur < 0 && !is_null(opts.data.data_info)){
            $(opts.data.data_info).parent().append($(opts.data.data_info).eq(0));
          }
        }
      }
    };
    
    
})(window, document, jQuery);

/*	判断客户端设备类型 http://devicedetector.net	*/
function device(){
	var ua = navigator.userAgent || navigator.vendor || window.opera || '';
	
	var fullNameRe = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i;
	var prefixRe = /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i;
	var fullNameMobileRe = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i;
	var prefixMobileRe = /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i;
	
	var dd = {
		isPhone: !!(fullNameRe.test(ua) || prefixRe.test(ua.substr(0, 4))),
		isMobile: !!(fullNameMobileRe.test(ua) || prefixMobileRe.test(ua.substr(0, 4))),
		isTablet: (!!(fullNameRe.test(ua) || prefixRe.test(ua.substr(0, 4)))) && !(!!(fullNameMobileRe.test(ua) || prefixMobileRe.test(ua.substr(0, 4)))),
		isWechat: (ua.toLowerCase().match(/MicroMessenger/i) == 'micromessenger')
	};
	
	return dd;
}
function is_null(a) {
	return (a === null);
}
function is_exist(a) {
	return !(typeof a == 'undefined');
}
function is_undefined(a) {
	return (is_null(a) || typeof a == 'undefined' || a === '' || a === 'undefined');
}
function is_array(a) {
	return (a instanceof Array);
}
function is_jquery(a) {
	return (a instanceof jQuery);
}
function is_object(a) {
	return ((a instanceof Object || typeof a == 'object') && !is_null(a) && !is_jquery(a) && !is_array(a) && !is_function(a));
}
function is_number(a) {
	return ((a instanceof Number || typeof a == 'number') && !isNaN(a));
}
function is_string(a) {
	return ((a instanceof String || typeof a == 'string') && !is_undefined(a) && !is_true(a) && !is_false(a));
}
function is_function(a) {
	return (a instanceof Function || typeof a == 'function');
}
function is_boolean(a) {
	return (a instanceof Boolean || typeof a == 'boolean' || is_true(a) || is_false(a));
}
function is_true(a) {
	return (a === true || a === 'true');
}
function is_false(a) {
	return (a === false || a === 'false');
}
function is_percentage(x) {
	return (is_string(x) && x.slice(-1) == '%');
}